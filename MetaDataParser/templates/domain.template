#! /usr/bin/env python
# -*- coding: utf-8 -*-
# vim: set ts=4 sts=4 sw=4 et:
<%
import os
import time
version = 0
try:
    from mercurial import ui, hg
    version = hg.repository(ui.ui(), '.').changelog.headrevs()[0]
except Exception:
    version = 0
%>

\#\# @brief ${struct.getElementsByTagName("desc")[0].firstChild.data.replace(os.linesep, str())}
# @author wuliang@maimiaotech.com
# @version: 0.0.${version}

from copy import deepcopy
from datetime import datetime
import os
import sys
import time
import types

_jsonEnode = None
try:
    import demjson
    _jsonEnode = demjson.encode
except Exception:
    try:
        import simplejson
    except Exception:
        try:
            import json
        except Exception:
            raise Exception("Can not import any json library")
        else:
            _jsonEnode = json.dumps
    else:
        _jsonEnode = simplejson.dumps

def __getCurrentPath():
    return os.path.normpath(os.path.join(os.path.realpath(__file__), os.path.pardir))

if __getCurrentPath() not in sys.path:
    sys.path.insert(0, __getCurrentPath())

## 导入所依赖的类
<%
imported = list()
%>
% if struct.getElementsByTagName("prop") != None:
    % for property in struct.getElementsByTagName("prop"):
        <%
        level = property.getElementsByTagName("level")[0].firstChild.data
        if level == "Basic" or level == "Basic Array":
            continue
        if property.getElementsByTagName("type")[0].firstChild.data in imported:
            continue
        dependencyType = property.getElementsByTagName("type")[0].firstChild.data
        %>
from ${dependencyType} import ${dependencyType}
<%
    imported.append(dependencyType)
%>
    % endfor
% endif

\#\# @brief <SPAN style="font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">${struct.getElementsByTagName("desc")[0].firstChild.data.replace(os.linesep, str())}</SPAN>
class ${struct.getElementsByTagName("name")[0].firstChild.data}(object):
    def __init__(self, kargs=dict()):
        super(self.__class__, self).__init__()

        self.__kargs = deepcopy(kargs)
        
        % for node in struct.getElementsByTagName("prop"):
        <%
            description = str()
            nameType = None 
            level = None
            sample = None
            private = None
            name = None

            try:
                description = node.getElementsByTagName("desc")[0].firstChild.data
            except Exception:
                pass

            try:
                nameType = node.getElementsByTagName("type")[0].firstChild.data
            except Exception:
                pass
            
            try:
                level = node.getElementsByTagName("level")[0].firstChild.data
            except Exception:
                pass

            try:
                sample = node.getElementsByTagName("sample")[0].firstChild.data
            except Exception:
                pass

            try:
                private = node.getElementsByTagName("private")[0].firstChild.data
            except Exception:
                pass

            try:
                name = node.getElementsByTagName("name")[0].firstChild.data
            except Exception:
                pass
            
        %>
        \#\# @brief <SPAN style="color:Blue3; font-size:16px; font-family:'宋体','Times New Roman',Georgia,Serif;">${description.replace(os.linesep, str())}</SPAN>
        # <UL>
        % if nameType != None:
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Type</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${nameType}</SPAN>
        # </LI>
        % endif
        % if Level != None:
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Level</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${level}</SPAN>
        # </LI>
        % endif
        % if sample != None:
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Sample</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${sample}</SPAN>
        # </LI>
        % endif
        % if private != None:
        # <LI>
        # <SPAN style="color:DarkRed; font-size:18px; font-family:'Times New Roman',Georgia,Serif;">Private</SPAN>: <SPAN style="color:DarkMagenta; font-size:16px; font-family:'Times New Roman','宋体',Georgia,Serif;">${private}</SPAN>
        # </LI>
        % endif
        # </UL>
        self.${name} = None
        % endfor
        
        self.__init(kargs)

    def toDict(self, **kargs):
        result = deepcopy(self.__kargs)
        for key, value in self.__dict__.iteritems():
            if key.endswith("__kargs"):
                continue
            if value == None:
                if kargs.has_key("includeNone") and kargs["includeNone"]:
                    result[key] = value
                else:
                    continue
            else:
                result[key] = value
        return result
        
    def _newInstance(self, name, value):
        types = self._getPropertyType(name)
        propertyType = types[0]
        isArray = types[1]
        if propertyType == bool:
            if isArray:
                if not value:
                    return []
                return [x for x in value[value.keys()[0]]]
            else:
                return value
        elif propertyType == datetime:
            format = "%Y-%m-%d %H:%M:%S"
            if isArray:
                if not value:
                    return []
                return [datetime.strptime(x, format) for x in value[value.keys()[0]]]
            else:
                return datetime.strptime(value, format)
        elif propertyType == str:
            if isArray:
                if not value:
                    return []
                return [x for x in value[value.keys()[0]]]
            else:
                if not isinstance(value, basestring):
                    return _jsonEnode(value)
                else:
                    return value
        else:
            if isArray:
                if not value:
                    return []
                return [propertyType(x) for x in value[value.keys()[0]]]
            else:
                return propertyType(value)
        
    def _getPropertyType(self, name):
        properties = {
            % for node in struct.getElementsByTagName("prop"):
            <%
                name = node.getElementsByTagName("name")[0].firstChild.data
                nameType = node.getElementsByTagName("type")[0].firstChild
            %>
            "${name}": "${nameType.data}",
            % endfor
        }
        levels = {
            % for node in struct.getElementsByTagName("prop"):
            <%
                name = node.getElementsByTagName("name")[0].firstChild.data
                level = node.getElementsByTagName("level")[0].firstChild.data

            %>
            "${name}": "${level}",
            % endfor

        }
        nameType = properties[name]
        pythonType = None
        if nameType == "Number":
            pythonType = int
        elif nameType == "String":
            pythonType = str
        elif nameType == 'Boolean':
            pythonType = bool
        elif nameType == "Date":
            pythonType = datetime
        elif nameType == 'Field List':
            pythonType == str
        elif nameType == 'Price':
            pythonType = float
        elif nameType == 'byte[]':
            pythonType = str
        else:
            pythonType = getattr(
                sys.modules[os.path.basename(
                os.path.dirname(os.path.realpath(__file__))) + "." + nameType], 
                nameType)

        level = levels[name]
        if "Array" in level:
            return (pythonType, True)
        else:
            return (pythonType, False)
        
    def __init(self, kargs):
        % for node in struct.getElementsByTagName("prop"):
        <%
        name = node.getElementsByTagName("name")[0].firstChild.data
        %>
        if kargs.has_key("${name}"):
            self.${name} = self._newInstance("${name}", kargs["${name}"])
        % endfor
